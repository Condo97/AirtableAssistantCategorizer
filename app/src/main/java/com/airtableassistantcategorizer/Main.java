/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.airtableassistantcategorizer;

import com.airtableassistantcategorizer.airtable.*;
import com.airtableassistantcategorizer.gpt_function_calls.CategorizeAirtableAssistantFC;
import com.airtableassistantcategorizer.keys.Keys;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.oaigptconnector.Constants;
import com.oaigptconnector.model.*;
import com.oaigptconnector.model.exception.OpenAIGPTException;
import com.oaigptconnector.model.generation.OpenAIGPTModels;
import com.oaigptconnector.model.request.chat.completion.OAIChatCompletionRequest;
import com.oaigptconnector.model.request.chat.completion.OAIChatCompletionRequestFunctionCall;
import com.oaigptconnector.model.request.chat.completion.OAIChatCompletionRequestMessage;
import com.oaigptconnector.model.response.chat.completion.http.OAIGPTChatCompletionResponse;
import httpson.Httpson;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class Main {

    public static final String airtablePath = "https://api.airtable.com/v0/";
    public static final String airtableBaseID = "appukE1AJQnZNDjIh";
    public static final String airtableTableID = "tblsBXFMHiKHL0VlT";
    public static final String airtableListRecordsPath = "/listRecords";
    private static final URI airtableUpdateURI;
    static {
        try {
            airtableUpdateURI = new URI(airtablePath + airtableBaseID + "/" + airtableTableID);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

    private static final URI airtableListPostURI;
    static {
        try {
            airtableListPostURI = new URI(airtablePath + airtableBaseID + "/" + airtableTableID + airtableListRecordsPath);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }


    public static void main(String[] args) throws URISyntaxException, IOException, InterruptedException {
        // Get AirtableAssistants from Airtable
        List<AirtableAssistantAndRecordID> allAirtableAssistantsAndRecordIDs;
        try {
            allAirtableAssistantsAndRecordIDs = getAllAirtableAssistantsAndRecordIDs();
        } catch (IOException | InterruptedException e) {
            System.out.println("Exception when getting all airtable assistants in Main!");
            throw new RuntimeException(e);
        }

        // Create completable futures list
        List<CompletableFuture<Void>> responseFutures = new ArrayList<>();

        // Iterate through each airtableAssistant in allAirtableAssistantsAndRecordIDs TODO: Maybe only do ones that don't have a category
        for (AirtableAssistantAndRecordID airtableAssistantAndRecordID: allAirtableAssistantsAndRecordIDs) {
            // Create text with stringBuilder from airtableAssistant name, mediumDescription, and emoji
            StringBuilder textStringBuilder = new StringBuilder();
            textStringBuilder.append("Name: ");
            textStringBuilder.append(airtableAssistantAndRecordID.getAirtableAssistant().getName());
            textStringBuilder.append("\nDescription: ");
            textStringBuilder.append(airtableAssistantAndRecordID.getAirtableAssistant().getMediumDescription());
            textStringBuilder.append("\nEmoji: ");
            textStringBuilder.append(airtableAssistantAndRecordID.getAirtableAssistant().getEmoji());

            // Get CategorizeAirtableAssistantFC
            CategorizeAirtableAssistantFC categorizeAirtableAssistantFC = null;
            try {
                categorizeAirtableAssistantFC = getCategorizeAirtableAssistantFC(textStringBuilder.toString());
            } catch (OAISerializerException | IOException | OAIDeserializerException | OpenAIGPTException |
                     InterruptedException e) {
                // TODO: Handle Errors if Necessary
                System.out.println("Error getting categorize airtable assistant FC in Main! Continuing...");
                e.printStackTrace();
                continue;
            }

            // Update category in airtable
            updateCategoryInAirtable(
                    airtableAssistantAndRecordID.getRecordID(),
                    categorizeAirtableAssistantFC.getCategory()
            );
        }
    }

    private static List<AirtableAssistantAndRecordID> getAllAirtableAssistantsAndRecordIDs() throws IOException, InterruptedException {
        return getAllAirtableAssistantsAndRecordIDs(null);
    }

    private static List<AirtableAssistantAndRecordID> getAllAirtableAssistantsAndRecordIDs(String offset) throws IOException, InterruptedException {
        // Build request
        ListAssistantsRequest listAssistantsRequest = new ListAssistantsRequest(
                offset
        );

        // Create HttpClient
        final HttpClient httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_2).connectTimeout(Duration.ofMinutes(com.oaigptconnector.Constants.AI_TIMEOUT_MINUTES)).build();

        // Send post and get response
        JsonNode responseJsonNode = Httpson.sendPOST(
                listAssistantsRequest,
                httpClient,
                airtableListPostURI,
                h -> {
                    h.setHeader("Authorization", "Bearer " + Keys.airtableAPI);
                }
        );

        // Attempt to transform responseJsonNode to ListAssistantsResponse
        ListAssistantsResponse listAssistantsResponse = new ObjectMapper().treeToValue(responseJsonNode, ListAssistantsResponse.class);

        // Create airtableAssistants list by transforming listAssistantsResponse to extract the AirtableAssistants
        List<AirtableAssistantAndRecordID> airtableAssistants = new ArrayList<>(listAssistantsResponse.getRecords().stream()
                .map(r -> new AirtableAssistantAndRecordID(
                        r.getFields(),
                        r.getId()
                ))
                .toList());

        // If listAssistantsResponse offset is not null or empty, call this function recursively with the offset and append the result to the airtableAssistants list
        if (listAssistantsResponse.getOffset() != null && !listAssistantsResponse.getOffset().isEmpty()) {
            airtableAssistants.addAll(getAllAirtableAssistantsAndRecordIDs(listAssistantsResponse.getOffset()));
        }

        // Return airtableAssistants
        return airtableAssistants;
    }

    private static CategorizeAirtableAssistantFC getCategorizeAirtableAssistantFC(String text) throws OAISerializerException, IOException, OAIDeserializerException, OpenAIGPTException, InterruptedException {
        // Create messageString with text and guidance
//        String messageString = "Categorize this assistant into a one word max two words but prefer one word common study related category. Maybe by subject and action depending on the assistant. I want a user to be able to open my education/tutor related app and be able to quickly find and select an assistant for what they're working on.\n\n" + text;
        String messageString = "Categorize this assistant into one of the following categories do not add to the list and do not divert from the spelling or phrasing: STEM, Tech, Arts, Media, Business, Health, Writing, Languages, Humanities, SocialSci, Law, Politics, Communication, Environment, Lifestyle, Creatives.\n\n" + text;

        // Create message with text
        OAIChatCompletionRequestMessage message = new OAIChatCompletionRequestMessageBuilder(CompletionRole.USER)
                .addText(messageString)
                .build();

        // Create HttpClient
        final HttpClient httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_2).connectTimeout(Duration.ofMinutes(com.oaigptconnector.Constants.AI_TIMEOUT_MINUTES)).build();

        // Do serializedChatCompletion to get chatCompletionResponse
        OAIGPTChatCompletionResponse chatCompletionResponse = FCClient.serializedChatCompletion(
                CategorizeAirtableAssistantFC.class,
                OpenAIGPTModels.GPT_4.getName(),
                4000,
                1,
                Keys.openAiAPI,
                httpClient,
                message
        );

        // Deserialize to CategorizeAirtableAssistantFC and return
        CategorizeAirtableAssistantFC categorizeAirtableAssistantFC;

        try {
            categorizeAirtableAssistantFC = OAIFunctionCallDeserializer.deserialize(chatCompletionResponse.getChoices()[0].getMessage().getFunction_call().getArguments(), CategorizeAirtableAssistantFC.class);
        } catch (OAIDeserializerException e) {
            System.out.println("Exception when deserializing chat completion response to GenerateAssistantWebpageFC..");
            throw e;
        }

        return categorizeAirtableAssistantFC;
    }

    private static void updateCategoryInAirtable(String airtableID, String category) throws URISyntaxException, IOException, InterruptedException {
        // Build UpdateCategoryInAirtableRequest
        UpdateCategoryInAirtableRequest updateCategoryInAirtableRequest = new UpdateCategoryInAirtableRequest(
                new UpdateCategoryInAirtableRequest.AssistantIDCategory(
                        category
                )
        );

        // Create HttpClient
        HttpClient client = HttpClient.newBuilder().version(HttpClient.Version.HTTP_2).connectTimeout(Duration.ofMinutes(5)).build();

        // Send patch to update category in airtable
        JsonNode response = Httpson.sendPATCH(
                updateCategoryInAirtableRequest,
                client,
                new URI( airtableUpdateURI.toURL() + "/" + airtableID),
                r -> {
                    r.setHeader("Authorization", "Bearer " + Keys.airtableAPI);
                }
        );

        System.out.println(response);
    }

}
